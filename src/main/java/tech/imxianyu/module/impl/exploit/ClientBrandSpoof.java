package tech.imxianyu.module.impl.exploit;

import io.netty.buffer.Unpooled;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import tech.imxianyu.eventapi.Handler;
import tech.imxianyu.events.packet.SendPacketEvent;
import tech.imxianyu.module.Module;
import tech.imxianyu.settings.BooleanSetting;
import tech.imxianyu.settings.ModeSetting;

import java.util.Random;

public class ClientBrandSpoof extends Module {

    public ClientBrandSpoof() {
        super("Client Brand Spoof", Category.EXPLOIT);
    }

    public final ModeSetting<Client> client = new ModeSetting<>("Client Brand", Client.Vanilla);
    public enum Client {
        Vanilla,
        Forge,
        Lunar,
        LabyMod,
        CheatBreaker,
        PvPLounge
    }

    public BooleanSetting bungeeSpoof = new BooleanSetting("BungeeCord Spoof", false);

    @Handler
    public void onSend(SendPacketEvent event) {
        if (bungeeSpoof.getValue()) {
            if (event.getPacket() instanceof C00Handshake) {
                C00Handshake packet = (C00Handshake) event.getPacket();
                packet.ip = packet.ip + "\u0000" + getRandomIPPart() + "." + getRandomIPPart() + "." + getRandomIPPart() + "." + getRandomIPPart() + "\u0000" + mc.getSession().getPlayerID();
            }
        }

        if (mc.isIntegratedServerRunning())
            return;

        Packet<?> packet = event.getPacket();


        if (this.client.getValue() == Client.Vanilla) {
            if (packet instanceof C17PacketCustomPayload) {
                final C17PacketCustomPayload customPayload = (C17PacketCustomPayload) packet;

                if (!customPayload.getChannelName().startsWith("MC|"))
                    event.setCancelled();
                else if (customPayload.getChannelName().equalsIgnoreCase("MC|Brand"))
                    customPayload.data = (new PacketBuffer(Unpooled.buffer()).writeString("vanilla"));
            }
        }

        if (this.client.getValue() == Client.Forge) {
            if (packet instanceof C17PacketCustomPayload) {
                final C17PacketCustomPayload customPayload = (C17PacketCustomPayload) packet;

                if (!customPayload.getChannelName().startsWith("MC|"))
                    event.setCancelled();
                else if (customPayload.getChannelName().equalsIgnoreCase("MC|Brand")) {
                    String s = customPayload.data.readStringFromBuffer(32767);
                    customPayload.data = (new PacketBuffer(Unpooled.buffer())).writeString(s + "\u0000FML\u0000");
                }
            }
        }

        if (this.client.getValue() == Client.Lunar) {
            if (packet instanceof C17PacketCustomPayload) {
                final C17PacketCustomPayload customPayload = (C17PacketCustomPayload) packet;

                if (!customPayload.getChannelName().startsWith("MC|"))
                    event.setCancelled();
                else if (customPayload.getChannelName().equalsIgnoreCase("MC|Brand"))
                    customPayload.data = (new PacketBuffer(Unpooled.buffer()).writeString("lunarclient:" + genRandomString(7)));
            }
        }


        if (this.client.getValue() == Client.LabyMod) {
            if (packet instanceof S3FPacketCustomPayload) {
                final S3FPacketCustomPayload payload = (S3FPacketCustomPayload) packet;
                if (payload.getChannelName().equals("REGISTER")) {
                    mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload("labymod3:main", this.getLabyInfo()));
                    mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload("LMC", this.getLabyInfo()));

                }
            }
        }

        if (this.client.getValue() == Client.CheatBreaker) {
            if (packet instanceof C17PacketCustomPayload) {
                final C17PacketCustomPayload customPayload = (C17PacketCustomPayload) packet;

                if (!customPayload.getChannelName().startsWith("MC|"))
                    event.setCancelled();
                else if (customPayload.getChannelName().equalsIgnoreCase("MC|Brand"))
                    customPayload.data = (new PacketBuffer(Unpooled.buffer()).writeString("CB"));
            }
        }

        if (this.client.getValue() == Client.PvPLounge) {
            if (packet instanceof C17PacketCustomPayload) {
                final C17PacketCustomPayload customPayload = (C17PacketCustomPayload) packet;

                if (!customPayload.getChannelName().startsWith("MC|"))
                    event.setCancelled();
                else if (customPayload.getChannelName().equalsIgnoreCase("MC|Brand"))
                    customPayload.data = (new PacketBuffer(Unpooled.buffer()).writeString("PLC18"));
            }
        }


    };

    private final String constant = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    private String genRandomString(int length) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            sb.append(constant.toCharArray()[random.nextInt(constant.length())]);
        }

        return sb.toString();
    }

    private PacketBuffer getLabyInfo() {
        return new PacketBuffer(Unpooled.buffer())
                .writeString("INFO")
                .writeString("{  \n" +
                        "   \"version\": \"3.9.25\",\n" +
                        "   \"ccp\": {  \n" +
                        "      \"enabled\": true,\n" +
                        "      \"version\": 2\n" +
                        "   },\n" +
                        "   \"shadow\":{  \n" +
                        "      \"enabled\": true,\n" +
                        "      \"version\": 1\n" +
                        "   },\n" +
                        "   \"addons\": [  \n" +
                        "      {  \n" +
                        "         \"uuid\": \"null\",\n" +
                        "         \"name\": \"null\"\n" +
                        "      }\n" +
                        "   ],\n" +
                        "   \"mods\": [\n" +
                        "      {  \n" +
                        "         \"hash\":\"sha256:null\",\n" +
                        "         \"name\":\"null.jar\"\n" +
                        "      }\n" +
                        "   ]\n" +
                        "}");
    }

    private final Random random = new Random();

    private String getRandomIPPart() {
        return String.valueOf(random.nextInt(256));
    }
}
